@model UserRoles.Models.Order

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout2.cshtml";
}
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.OrderID)

        @*<div class="form-group">
            @Html.LabelFor(model => model.OrderName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderName, "", new { @class = "text-danger" })
            </div>*@
        @*</div>*@
        <div class="form-group">
            @Html.LabelFor(m => m.MySignature, htmlAttributes: new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @try
                {

                    var base64 = Convert.ToBase64String(Model.MySignature);
                    var imgsrc = string.Format("data:image/jpg;base64,{0}", base64);
                    <img src='@imgsrc' style="max-width:200px;max-height:200px" />


                }
                catch
                {

                }
                @*@Html.EditorFor(m => m.MySignature, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })*@
                @Html.ValidationMessageFor(m => m.MySignature, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })

            </div>
        </div>
        @if (Request.IsAuthenticated && User.IsInRole("Admin") && !User.IsInRole("Driver"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.PaymentType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.PaymentType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.PaymentType, "", new { @class = "text-danger" })

                </div>
            </div>
        }


        <div class="form-group">
            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.CustomerPhone, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CustomerPhone, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CollDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.CollDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CollDate, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedReturnDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.ExpectedReturnDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ExpectedReturnDate, "", new { @class = "text-danger" })

            </div>
        </div>
        @if (Request.IsAuthenticated && User.IsInRole("Admin"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ActualReturnDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.ActualReturnDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"} })
                    @Html.ValidationMessageFor(model => model.ActualReturnDate, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateDiff, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.DateDiff, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.DateDiff, "", new { @class = "text-danger" })

                </div>
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.DriverID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.DriverID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DriverID, "", new { @class = "text-danger" })

            </div>
        </div>

        @if (Request.IsAuthenticated && User.IsInRole("Admin"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Seen, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Seen)
                        @Html.ValidationMessageFor(model => model.Seen, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PickUp, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.PickUp)
                        @Html.ValidationMessageFor(model => model.PickUp, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Returned, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Returned)
                        @Html.ValidationMessageFor(model => model.Returned, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.OutForDel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.OutForDel)
                    @Html.ValidationMessageFor(model => model.OutForDel, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Delivered, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Delivered)
                    @Html.ValidationMessageFor(model => model.Delivered, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.OutForCol, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.OutForCol)
                    @Html.ValidationMessageFor(model => model.OutForCol, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Collected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Collected)
                    @Html.ValidationMessageFor(model => model.Collected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.ConSig, htmlAttributes: new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.ConSig, new { htmlAttributes = new { @class = "form-control", @Value = " " } })
                @Html.ValidationMessageFor(m => m.ConSig, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-danger btn-block" />
            </div>
        </div>
    </div>
}

<div>
    @if (Request.IsAuthenticated && User.IsInRole("Admin"))
    {
        @Html.ActionLink("Back to List", "Index")
    }
    @if (Request.IsAuthenticated && User.IsInRole("Driver"))
    {
        @Html.ActionLink("Back to List", "DCollection", "DriverVM")
    }

</div>
@section Scripts {

    @Scripts.Render("~/Scripts/signature_pad.min.js")
    @Scripts.Render("~/Scripts/SignaturePadInit.js")
    @*<script src="~/Scripts/signature_pad.min.js"></script>
        <script src="~/Scripts/SignaturePadInit.js"></script>*@
}
